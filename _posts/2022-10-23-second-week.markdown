---
layout: post
title:  "My Week 4"
date:   2022-10-23 15:26:34 -0500
categories: jekyll update
---
Two words describe this week and those words are ‘meetings’ and ‘headaches’ . My team and I had to get done for our deadline the coding problems that we were assigned last week. So this meant many meetings to organize ourselves and discuss what we needed to do to finish our assignments.

As I mentioned in the previous entry, the problems we were assigned are part of the Code Jam competition made by Google, and depending on the problem they can get seriously tricky. Last week we solved 3 of the 5 problems in the four programming languages (Python, Kotlin, Dart and Typescript) that we were asked to use to solve them. At the end, the problems we solved that week weren’t that hard to solve thanks to the involvement of all members of the team. 

The issues that we encountered were more of how to implement those solutions to each programming language and these issues were much more present during this week. First of all, we were assigned 3 more problems to the pile of problems to solve as a team. Hurray…?. And to make things more complicated the rest of the problems to solve weren’t as easy and intuitive as the first ones that were solved last week. Especially when you’re dealing with the intricacies of a programming language that you’re just currently learning.

I mentioned before how much of a pain Javascript and Typescript can be with some things in my last post, especially when dealing with runtime environments, module versions and libraries. Sometimes code can work just fine in your local development environment, but after running it in another environment things just break. Usually things like this can get solved with the use of the error logs and a little debugging. But this is not the case with the Code Jam platform, because if your code has a compilation error, good luck trying to find what specific method or function broke your code.

Problem 5 of the Round 1A of the 2022 edition of Code Jam was the problem I had the most issues with during this week. You can find the definition of the problem [here]. It’s basically a problem that deals with graph theory and probability. Dusting off a little of what I learned during Discrete Math classes was necessary to understand this problem (and a little help from Google too). Getting the code to work on Python was easy enough, but translating it to Typescript was a head scratching experience. Like I mentioned in my previous entry, inputs work in a funny way in Node. Usually a window prompt, or copying information from an HTML element is enough with Javascript to get input from the user in a browser. But getting input from the console using Node works in a different manner. I mentioned in my post from last week how you need to make use of the `readline` module to create an interface to get input from users in your console, and depending on the situation this can get pretty tricky. 

Usually when dealing with input using languages like Python you can get the input you need from the user just when you need it. But because of the way `readline` works, just trying to find the best way to make your inputs work is another logic problem by itself. With previous exercises trying to get this input was difficult but thanks to the help of the sample solution that Code Jam offers to users it didn’t take too much time to find a way to do it. But with problem 5 you had to deal with interactive input, instead of receiving all input at once like in previous exercises, so finding a way to make said input work was less intuitive. You can find a better description of the solution and the method I used to solve this issue in my technical log. 

At the end of this week I consider that I learned quite a lot of things not only about Typescript but I also learned many things about Javascript and Node that I didn’t know before. I feel more confident with my ability to work on a project with a new programming language if it’s required to do so and I hope this helps me when dealing with the same situation if it arises again in the future.

One of the most important lessons learned during this week was: Learn to manage your time! It’s so easy to get overwhelmed by all the stuff you have in charge and being as optimal as possible with each task you need to complete is critical. Planning what you are going to do each day and the tasks that you’re trying to solve by the end of it it’s really important. Having a list of your tasks in a structured way and making sure you’re getting them done with time makes sure that you don’t lag behind on your work. Procrastination is not advised!. I have learned that I work best having a clear idea of the things I need to get completed during a specific lapse of time. And using the Pomodoro technique has become my best friend to deal with procrastination. Making rounds of 25 minutes to deal with a task at hand and then having 5 minutes to take a walk or relax for a little really gives me the best benefits to being proficient at my work. After getting a task done I can get it off my list and if I get stuck with a problem I can move to another one task and come back to it later with another perspective.

And another important lesson was to know when to ask for help from others when you’re stuck in a problem. It’s really useful sometimes to put into words the issues you’re dealing with in your code because in that way you may realize things you need to change or add to your program before even getting feedback from others. And maybe others can see something you’re not seeing with your problem.

Learning how to give feedback is a skill that I’m trying to improve too, and I try to take every chance I get to help other teammates with their code so I can improve my feedback abilities. And well, just trying to help others whenever you can is always nice by itself. Building bonds with your teammates helps to improve the team’s workflow and helps getting things done faster and better.

So even though this week was a little more exhaustive than last week, I also think that it came with many benefits. I learned how to be a better learner, how to manage better my time, how to ask for and give feedback, how to “Google” things better and overall I think I’m learning to stick to good habits that will help me to improve myself. I hope next week comes with many new lessons too.

[here]: https://codingcompetitions.withgoogle.com/codejam/round/0000000000876ff1/0000000000a45fc0

